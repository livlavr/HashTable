--------------------------------------------------------------------------------
Profile data file 'cachegrind.out.168683'
--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         16777216 B, 64 B, 16-way associative
Profiled target:  ./bin/HashTableBenchmark
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      I1mr           ILmr           Dr                      D1mr                   DLmr           Dw                     D1mw            DLmw            
--------------------------------------------------------------------------------
44,977,830,386 (100.0%) 1,834 (100.0%) 1,784 (100.0%) 17,086,082,925 (100.0%) 1,203,303,288 (100.0%) 4,201 (100.0%) 4,836,661,664 (100.0%) 46,438 (100.0%) 24,099 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                     D1mr                 DLmr           Dw                     D1mw            DLmw             file:function
--------------------------------------------------------------------------------
20,121,936,088 (44.74%)  5 ( 0.27%)  5 ( 0.28%) 9,378,553,044 (54.89%) 574,226,267 (47.72%)     0          2,105,092,776 (43.52%)      1 ( 0.00%)      0           /root/Ded32/HashTable/ChainHashTable/src/ChainHashTable.cpp:chainHashTableSearch(ChainHashTable*, char const*)
14,647,103,424 (32.57%)  7 ( 0.38%)  7 ( 0.39%) 3,286,974,484 (19.24%) 576,441,159 (47.90%)     0                      0               0               0           ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strcmp_avx2
 5,880,000,000 (13.07%)  4 ( 0.22%)  4 ( 0.22%) 2,310,000,000 (13.52%)  52,501,897 ( 4.36%)     0          2,625,000,000 (54.27%)      2 ( 0.00%)      0           /root/Ded32/HashTable/HashFunctions/src/StringHash.cpp:crc32HashIntrinsics(char const*, unsigned long)
 1,680,000,000 ( 3.74%)  1 ( 0.05%)  1 ( 0.06%)   840,000,000 ( 4.92%)           0              0                      0               0               0           /usr/lib/gcc/x86_64-linux-gnu/11/include/smmintrin.h:crc32HashIntrinsics(char const*, unsigned long)
 1,365,094,059 ( 3.04%)  9 ( 0.49%)  9 ( 0.50%)   630,042,004 ( 3.69%)       1,252 ( 0.00%)     1 ( 0.02%)   105,040,511 ( 2.17%) 10,000 (21.53%)      0           /root/Ded32/HashTable/ChainHashTable/HashTableBenchmark/src/HashTableBenchmark.cpp:hashTableSearchTest(ChainHashTable*, Buffer<char*>*)
 1,265,275,268 ( 2.81%) 44 ( 2.40%) 34 ( 1.91%)   632,637,600 ( 3.70%)          38 ( 0.00%)     0                     20 ( 0.00%)      1 ( 0.00%)      1 ( 0.00%)  ???:???

--------------------------------------------------------------------------------
-- Auto-annotated source: /root/Ded32/HashTable/ChainHashTable/HashTableBenchmark/src/HashTableBenchmark.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr           DLmr       Dw                  D1mw           DLmw       

-- line 7 ----------------------------------------
          .          .          .                    .              .          .                   .              .          .           #include "HashTableBenchmark.hpp"
          .          .          .                    .              .          .                   .              .          .           #include "custom_asserts.h"
          .          .          .                    .              .          .                   .              .          .           #include "color_printf.h"
          .          .          .                    .              .          .                   .              .          .           #include "FileHandler.hpp"
          .          .          .                    .              .          .                   .              .          .           
          .          .          .                    .              .          .                   .              .          .           static const int NUMBER_OF_TESTS = 10000;
          .          .          .                    .              .          .                   .              .          .           static const int NUMBER_OF_WARMUP_TESTS = 500;
          .          .          .                    .              .          .                   .              .          .           
     59,994 ( 0.00%) 1 ( 0.05%) 0                    0              0          0              39,996 ( 0.00%)     0          0           static inline uint64_t rdtsc() {
          .          .          .                    .              .          .                   .              .          .               unsigned int lo, hi;
     99,990 ( 0.00%) 0          0                    0              0          0              39,996 ( 0.00%)     0          0               __asm__ __volatile__ (
          .          .          .                    .              .          .                   .              .          .                   "cpuid\n\t"
          .          .          .                    .              .          .                   .              .          .                   "rdtsc\n\t"
          .          .          .                    .              .          .                   .              .          .                   : "=a"(lo), "=d"(hi)
          .          .          .                    .              .          .                   .              .          .                   : "a"(0)
          .          .          .                    .              .          .                   .              .          .                   : "%ebx", "%ecx");
     99,990 ( 0.00%) 0          0               39,996 ( 0.00%)     0          0                   0              0          0               return ((uint64_t)hi << 32) | lo;
     59,994 ( 0.00%) 0          0               59,994 ( 0.00%)     0          0                   0              0          0           }
          .          .          .                    .              .          .                   .              .          .           
          6 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)           0              0          0                   3 ( 0.00%)     0          0           void hashTableSearchTest(ChainHashTable* hash_table, Buffer<char*>* lines) {
          2 ( 0.00%) 0          0                    0              0          0                   1 ( 0.00%)     0          0               srand(42);
          .          .          .                    .              .          .                   .              .          .           
          3 ( 0.00%) 0          0                    2 ( 0.00%)     0          0                   1 ( 0.00%)     0          0               int lines_number = lines->size;
          6 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)           1 ( 0.00%)     0          0                   2 ( 0.00%)     0          0               char* keys = (char*)calloc(lines_number, sizeof(char)*32);
     40,005 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)      30,002 ( 0.00%)     0          0                   1 ( 0.00%)     0          0               for(int word_index = 1; word_index < lines_number; word_index++) {
    160,000 ( 0.00%) 0          0               60,000 ( 0.00%) 1,251 ( 0.00%) 0              10,000 ( 0.00%)     0          0                   strncpy(&(keys[word_index * 32]), lines->data[word_index], 32);
          .          .          .                    .              .          .                   .              .          .               }
          .          .          .                    .              .          .                   .              .          .           
          6 ( 0.00%) 0          0                    0              0          0                   1 ( 0.00%)     0          0               color_printf(GREEN_COLOR, BOLD, "BEGIN WARMUP\n");
          .          .          .                    .              .          .                   .              .          .               //Warmup
      1,501 ( 0.00%) 2 ( 0.11%) 2 ( 0.11%)         999 ( 0.00%)     0          0                   1 ( 0.00%)     0          0               for(int test_index = 1; test_index < NUMBER_OF_WARMUP_TESTS; test_index++) {
 19,962,495 ( 0.04%) 0          0           14,970,998 ( 0.09%)     0          0                 499 ( 0.00%)     0          0                   for(int word_index = 1; word_index < lines_number; word_index++) {
          .          .          .                    .              .          .                   .              .          .                       // printf("%d/%d\r", test_index, lines_number);
          .          .          .                    .              .          .                   .              .          .                       // printf("<search: %s>\n",     &(keys[word_index * 32]));
          .          .          .                    .              .          .                   .              .          .                       // printf("<<%lu>>\n",   hash_table->hashFunction(&(keys[word_index * 32]), 32) % hash_table->capacity);
 44,910,000 ( 0.10%) 0          0           14,970,000 ( 0.09%)     0          0           4,990,000 ( 0.10%)     0          0                       chainHashTableSearch(hash_table, &(keys[word_index * 32]));
          .          .          .                    .              .          .                   .              .          .                   }
          .          .          .                    .              .          .                   .              .          .               }
          .          .          .                    .              .          .                   .              .          .           
          6 ( 0.00%) 0          0                    0              0          0                   1 ( 0.00%)     0          0               color_printf(GREEN_COLOR, BOLD, "BEGIN TESTS\n");
          .          .          .                    .              .          .                   .              .          .               //Tests
          1 ( 0.00%) 0          0                    0              0          0                   1 ( 0.00%)     0          0               uint64_t total = 0;
     30,001 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)      19,999 ( 0.00%)     0          0                   1 ( 0.00%)     0          0               for(int test_index = 1; test_index < NUMBER_OF_TESTS; test_index++) {
     19,998 ( 0.00%) 0          0                    0              0          0              19,998 ( 0.00%)     1 ( 0.00%) 0                   uint64_t begin = rdtsc();
400,009,995 ( 0.89%) 1 ( 0.05%) 1 ( 0.06%) 299,989,998 ( 1.76%)     0          0               9,999 ( 0.00%)     0          0                   for(int word_index = 1; word_index < lines_number; word_index++) {
          .          .          .                    .              .          .                   .              .          .                       // printf("%d/%d\r", test_index, lines_number);
899,910,000 ( 2.00%) 0          0          299,970,000 ( 1.76%)     0          0          99,990,000 ( 2.07%)     0          0                       chainHashTableSearch(hash_table, &(keys[word_index * 32]));
          .          .          .                    .              .          .                   .              .          .                   }
     19,998 ( 0.00%) 0          0                    0              0          0              19,998 ( 0.00%) 9,999 (21.53%) 0                   uint64_t end = rdtsc();
     29,997 ( 0.00%) 0          0               29,997 ( 0.00%)     0          0                   0              0          0                   total += end - begin;
          .          .          .                    .              .          .                   .              .          .               }
          .          .          .                    .              .          .                   .              .          .           
         12 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)           1 ( 0.00%)     0          0                   1 ( 0.00%)     0          0               color_printf(GREEN_COLOR, BOLD, "TICKS RESULT: %lu\n", total/NUMBER_OF_TESTS);
         20 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)           4 ( 0.00%)     1 ( 0.00%) 1 ( 0.02%)          1 ( 0.00%)     0          0               color_printf(GREEN_COLOR, BOLD, "TICKS RESULT (avg for element): %.2f\n", (float)total/NUMBER_OF_TESTS/(hash_table->size));
          .          .          .                    .              .          .                   .              .          .           
          4 ( 0.00%) 0          0                    1 ( 0.00%)     0          0                   2 ( 0.00%)     0          0               FREE(keys);
          3 ( 0.00%) 0          0                    2 ( 0.00%)     0          0                   0              0          0           }
          .          .          .                    .              .          .                   .              .          .           
          6 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)           0              0          0                   3 ( 0.00%)     0          0           void fillChainHashTable(ChainHashTable* hash_table, Buffer<char*>* lines) {
          3 ( 0.00%) 0          0                    2 ( 0.00%)     0          0                   1 ( 0.00%)     0          0               int lines_number = lines->size;
     40,005 ( 0.00%) 0          0               30,002 ( 0.00%)     0          0                   1 ( 0.00%)     0          0               for(int i = 1; i < lines_number; i++) {
    110,000 ( 0.00%) 0          0               50,000 ( 0.00%) 1,250 ( 0.00%) 0              10,000 ( 0.00%)     0          0                   chainHashTableInsert(hash_table, lines->data[i]);
          .          .          .                    .              .          .                   .              .          .               }
          4 ( 0.00%) 0          0                    2 ( 0.00%)     0          0                   0              0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/lib/gcc/x86_64-linux-gnu/11/include/smmintrin.h
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                   D1mr       DLmr       Dw         D1mw       DLmw       

-- line 841 ----------------------------------------
            .          .          .                    .          .          .          .          .          .           {
            .          .          .                    .          .          .          .          .          .             return __builtin_ia32_crc32si (__C, __V);
            .          .          .                    .          .          .          .          .          .           }
            .          .          .                    .          .          .          .          .          .           
            .          .          .                    .          .          .          .          .          .           #ifdef __x86_64__
            .          .          .                    .          .          .          .          .          .           extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
            .          .          .                    .          .          .          .          .          .           _mm_crc32_u64 (unsigned long long __C, unsigned long long __V)
            .          .          .                    .          .          .          .          .          .           {
1,680,000,000 ( 3.74%) 1 ( 0.05%) 1 ( 0.06%) 840,000,000 ( 4.92%) 0          0          0          0          0             return __builtin_ia32_crc32di (__C, __V);
            .          .          .                    .          .          .          .          .          .           }
            .          .          .                    .          .          .          .          .          .           #endif
            .          .          .                    .          .          .          .          .          .           
            .          .          .                    .          .          .          .          .          .           #ifdef __DISABLE_SSE4_2__
            .          .          .                    .          .          .          .          .          .           #undef __DISABLE_SSE4_2__
            .          .          .                    .          .          .          .          .          .           #pragma GCC pop_options
            .          .          .                    .          .          .          .          .          .           #endif /* __DISABLE_SSE4_2__ */
            .          .          .                    .          .          .          .          .          .           
-- line 857 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /root/Ded32/HashTable/HashFunctions/src/StringHash.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr                DLmr       Dw                   D1mw       DLmw       

-- line 32 ----------------------------------------
          .          .          .                    .                   .          .                    .          .          .                   for (uint64_t j = 0; j < 8; j++) {
          .          .          .                    .                   .          .                    .          .          .                       crc = (crc >> 1) ^ (-(int)(crc & 1) & Polynomial);
          .          .          .                    .                   .          .                    .          .          .                   }
          .          .          .                    .                   .          .                    .          .          .               }
          .          .          .                    .                   .          .                    .          .          .           
          .          .          .                    .                   .          .                    .          .          .               return ~crc;
          .          .          .                    .                   .          .                    .          .          .           }
          .          .          .                    .                   .          .                    .          .          .           
945,000,000 ( 2.10%) 1 ( 0.05%) 1 ( 0.06%) 105,000,000 ( 0.61%)          0          0          420,000,000 ( 8.68%) 2 ( 0.00%) 0           uint64_t crc32HashIntrinsics(const char* key, size_t length) {
210,000,000 ( 0.47%) 0          0                    0                   0          0          105,000,000 ( 2.17%) 0          0               uint64_t crc = 0xFFFFFFFF;
          .          .          .                    .                   .          .                    .          .          .           
105,000,000 ( 0.23%) 0          0                    0                   0          0          105,000,000 ( 2.17%) 0          0               uint64_t string_key1 = 0;
105,000,000 ( 0.23%) 0          0                    0                   0          0          105,000,000 ( 2.17%) 0          0               uint64_t string_key2 = 0;
105,000,000 ( 0.23%) 1 ( 0.05%) 1 ( 0.06%)           0                   0          0          105,000,000 ( 2.17%) 0          0               uint64_t string_key3 = 0;
315,000,000 ( 0.70%) 0          0          210,000,000 ( 1.23%)     10,608 ( 0.00%) 0          105,000,000 ( 2.17%) 0          0               uint64_t string_key4 = 0;
          .          .          .                    .                   .          .                    .          .          .           
105,000,000 ( 0.23%) 0          0                    0                   0          0          105,000,000 ( 2.17%) 0          0               memcpy(&string_key1, key + 0, 8);
420,000,000 ( 0.93%) 0          0          210,000,000 ( 1.23%)        242 ( 0.00%) 0          105,000,000 ( 2.17%) 0          0               memcpy(&string_key2, key + 8, 8);
420,000,000 ( 0.93%) 0          0          210,000,000 ( 1.23%) 52,490,449 ( 4.36%) 0          105,000,000 ( 2.17%) 0          0               memcpy(&string_key3, key + 16, 8);
420,000,000 ( 0.93%) 1 ( 0.05%) 1 ( 0.06%) 210,000,000 ( 1.23%)        598 ( 0.00%) 0          105,000,000 ( 2.17%) 0          0               memcpy(&string_key4, key + 24, 8);
          .          .          .                    .                   .          .                    .          .          .           
525,000,000 ( 1.17%) 0          0          210,000,000 ( 1.23%)          0          0          315,000,000 ( 6.51%) 0          0               crc = _mm_crc32_u64(crc, string_key1);
525,000,000 ( 1.17%) 0          0          210,000,000 ( 1.23%)          0          0          315,000,000 ( 6.51%) 0          0               crc = _mm_crc32_u64(crc, string_key2);
525,000,000 ( 1.17%) 0          0          210,000,000 ( 1.23%)          0          0          315,000,000 ( 6.51%) 0          0               crc = _mm_crc32_u64(crc, string_key3);
525,000,000 ( 1.17%) 1 ( 0.05%) 1 ( 0.06%) 210,000,000 ( 1.23%)          0          0          315,000,000 ( 6.51%) 0          0               crc = _mm_crc32_u64(crc, string_key4);
          .          .          .                    .                   .          .                    .          .          .           
105,000,000 ( 0.23%) 0          0          105,000,000 ( 0.61%)          0          0                    0          0          0               return crc;
525,000,000 ( 1.17%) 0          0          420,000,000 ( 2.46%)          0          0                    0          0          0           }
          .          .          .                    .                   .          .                    .          .          .           
          .          .          .                    .                   .          .                    .          .          .           uint64_t sumHash(const char* key, size_t length) {
          .          .          .                    .                   .          .                    .          .          .               uint64_t sum = 0;
          .          .          .                    .                   .          .                    .          .          .               uint64_t mod = (uint64_t)(1e9 + 7);
          .          .          .                    .                   .          .                    .          .          .               while (*key != '\0') {
          .          .          .                    .                   .          .                    .          .          .                   sum += (unsigned char)*key;
          .          .          .                    .                   .          .                    .          .          .                   key++;
          .          .          .                    .                   .          .                    .          .          .               }
-- line 67 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /root/Ded32/HashTable/ChainHashTable/src/ChainHashTable.cpp
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr                 DLmr       Dw                   D1mw         DLmw       

-- line 7 ----------------------------------------
            .          .          .                      .                    .          .                    .            .          .           #include "StringHash.hpp"
            .          .          .                      .                    .          .                    .            .          .           #include "ChainHashTable.hpp"
            .          .          .                      .                    .          .                    .            .          .           #include "custom_asserts.h"
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .           static const int CTOR_LINKED_LIST_CAPACITY = 20;
            .          .          .                      .                    .          .                    .            .          .           static const int MAX_WORD_LENGTH           = 32;
            .          .          .                      .                    .          .                    .            .          .           #define DEFAULT_HASH_FUNCTION crc32HashIntrinsics;
            .          .          .                      .                    .          .                    .            .          .           
            7 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)             0                    0          0                    4 ( 0.00%)   0          0           ChainHashTableErrors chainHashTableCtor(ChainHashTable* hash_table, int ctor_capacity) {
            2 ( 0.00%) 0          0                      1 ( 0.00%)           0          0                    0            0          0               warning(hash_table,        CHAIN_NULL_PTR_ERROR);
            2 ( 0.00%) 2 ( 0.11%) 2 ( 0.11%)             1 ( 0.00%)           0          0                    0            0          0               warning(ctor_capacity > 0, CHAIN_CTOR_CAPACITY_ERROR);
            .          .          .                      .                    .          .                    .            .          .           
            3 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)             2 ( 0.00%)           0          0                    1 ( 0.00%)   0          0               hash_table->capacity     = ctor_capacity;
            2 ( 0.00%) 0          0                      1 ( 0.00%)           0          0                    1 ( 0.00%)   0          0               hash_table->size         = 0;
            3 ( 0.00%) 0          0                      1 ( 0.00%)           0          0                    1 ( 0.00%)   0          0               hash_table->hashFunction = DEFAULT_HASH_FUNCTION;
            .          .          .                      .                    .          .                    .            .          .           
            8 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)             2 ( 0.00%)           0          0                    2 ( 0.00%)   0          0               hash_table->buckets = (LinkedList**)calloc(ctor_capacity, sizeof(LinkedList*));
            4 ( 0.00%) 0          0                      2 ( 0.00%)           0          0                    0            0          0               warning(hash_table->buckets, CHAIN_NULL_PTR_ERROR);
            .          .          .                      .                    .          .                    .            .          .           
        4,005 ( 0.00%) 2 ( 0.11%) 2 ( 0.11%)         3,002 ( 0.00%)           0          0                    1 ( 0.00%)   0          0               for(int i = 0; i < ctor_capacity; i++) {
       10,000 ( 0.00%) 0          0                  3,000 ( 0.00%)           0          0                2,000 ( 0.00%) 119 ( 0.26%) 0                   hash_table->buckets[i] = (LinkedList*)calloc(1, sizeof(LinkedList));
       10,000 ( 0.00%) 0          0                  4,000 ( 0.00%)           0          0                1,000 ( 0.00%)   0          0                   llistCtor(hash_table->buckets[i], CTOR_LINKED_LIST_CAPACITY);
            .          .          .                      .                    .          .                    .            .          .               }
            .          .          .                      .                    .          .                    .            .          .           
            1 ( 0.00%) 0          0                      0                    0          0                    0            0          0               return CHAIN_HASH_SUCCESS;
            3 ( 0.00%) 0          0                      3 ( 0.00%)           1 ( 0.00%) 0                    0            0          0           }
            .          .          .                      .                    .          .                    .            .          .           
       90,000 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)        10,000 ( 0.00%)           0          0               40,000 ( 0.00%)   0          0           ChainHashTableErrors chainHashTableInsert(ChainHashTable* hash_table, const char* key) {
       20,000 ( 0.00%) 0          0                 10,000 ( 0.00%)           0          0                    0            0          0               warning(hash_table, CHAIN_NULL_PTR_ERROR);
            .          .          .                      .                    .          .                    .            .          .           
       90,000 ( 0.00%) 2 ( 0.11%) 2 ( 0.11%)        20,000 ( 0.00%)           0          0               10,000 ( 0.00%)   0          0               if(chainHashTableSearch(hash_table, key) == FOUND) {
            .          .          .                      .                    .          .                    .            .          .                   return CHAIN_ALREADY_EXIST_ERROR;
            .          .          .                      .                    .          .                    .            .          .               }
            .          .          .                      .                    .          .                    .            .          .           
       40,000 ( 0.00%) 0          0                      0                    0          0               20,000 ( 0.00%)   0          0               char* allocated_key = (char*)calloc(MAX_WORD_LENGTH, sizeof(char));
       60,000 ( 0.00%) 0          0                 20,000 ( 0.00%)           0          0               10,000 ( 0.00%)   0          0               strncpy(allocated_key, key, MAX_WORD_LENGTH);
            .          .          .                      .                    .          .                    .            .          .           
       70,000 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)        30,000 ( 0.00%)           0          0               20,000 ( 0.00%)   0          0               uint64_t hash = hash_table->hashFunction(allocated_key, MAX_WORD_LENGTH);
       80,000 ( 0.00%) 0          0                 30,000 ( 0.00%)           0          0               10,000 ( 0.00%)   0          0               int index = hash % hash_table->capacity;
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               Element element = {.key  = allocated_key,
       40,000 ( 0.00%) 0          0                 20,000 ( 0.00%)           0          0               20,000 ( 0.00%)   0          0                                  .hash = hash};
            .          .          .                      .                    .          .                    .            .          .               // printf("<insert: %s>\n",   element.key);
            .          .          .                      .                    .          .                    .            .          .               // printf("<<element.key: %d>>\n", hash_table->hashFunction(element.key, MAX_WORD_LENGTH) % hash_table->capacity);
            .          .          .                      .                    .          .                    .            .          .               // printf("<%s>\n", element.key);
            .          .          .                      .                    .          .                    .            .          .               // printf("<%d>\n", index);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[index] index: %d>\n", index);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->free: %d>\n", hash_table->buckets[290]->free);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->capacity: %d>\n", hash_table->buckets[290]->capacity);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->next: %d>\n",     hash_table->buckets[290]->next[0]);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->prev: %d>\n",     hash_table->buckets[290]->prev[0]);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->size: %d>\n",     hash_table->buckets[290]->size);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "element.key: %s>\n", element.key);
            .          .          .                      .                    .          .                    .            .          .           
      110,000 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)        40,000 ( 0.00%)       6,066 ( 0.00%) 0               10,000 ( 0.00%)   0          0               llistPushBack(hash_table->buckets[index], &element);
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "AFTER PUSH BACK\n");
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[index] index: %d>\n", index);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->free: %d>\n", hash_table->buckets[290]->free);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->capacity: %d>\n", hash_table->buckets[290]->capacity);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->next: %d>\n",     hash_table->buckets[290]->next[0]);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->prev: %d>\n",     hash_table->buckets[290]->prev[0]);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "<hash_table->buckets[290]->size: %d>\n",     hash_table->buckets[290]->size);
            .          .          .                      .                    .          .                    .            .          .               // fprintf(stderr, "element.key: %s>\n", element.key);
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               // printf("<%d>\n", hash_table->buckets[index]->size);
            .          .          .                      .                    .          .                    .            .          .           
       50,000 ( 0.00%) 0          0                 30,000 ( 0.00%)           0          0               10,000 ( 0.00%)   0          0               (hash_table->size)++;
            .          .          .                      .                    .          .                    .            .          .           
       10,000 ( 0.00%) 0          0                      0                    0          0                    0            0          0               return CHAIN_HASH_SUCCESS;
       50,000 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)        40,000 ( 0.00%)           0          0                    0            0          0           }
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .           ChainHashTableErrors chainHashTableRehash(ChainHashTable* hash_table) {
            .          .          .                      .                    .          .                    .            .          .               int new_capacity = hash_table->capacity * 2;
            .          .          .                      .                    .          .                    .            .          .               LinkedList** new_buckets = (LinkedList**)calloc(new_capacity, sizeof(LinkedList*));
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               for (int i = 0; i < new_capacity; i++) {
            .          .          .                      .                    .          .                    .            .          .                   new_buckets[i] = (LinkedList*)calloc(1, sizeof(LinkedList));
            .          .          .                      .                    .          .                    .            .          .                   llistCtor(new_buckets[i], CTOR_LINKED_LIST_CAPACITY);
-- line 85 ----------------------------------------
-- line 111 ----------------------------------------
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .           float chainHashTableGetLoadFactor(ChainHashTable* hash_table) {
            .          .          .                      .                    .          .                    .            .          .               float size     = (float)hash_table->size;
            .          .          .                      .                    .          .                    .            .          .               float capacity = (float)hash_table->capacity;
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               return (size / capacity);
            .          .          .                      .                    .          .                    .            .          .           }
            .          .          .                      .                    .          .                    .            .          .           
  629,940,000 ( 1.40%) 1 ( 0.05%) 1 ( 0.06%)             0                    0          0          314,970,000 ( 6.51%)   0          0           ChainHashTableSearchStatus chainHashTableSearch(ChainHashTable* hash_table, const char* key) {
  209,980,000 ( 0.47%) 0          0            104,990,000 ( 0.61%)           0          0                    0            0          0               warning(hash_table, NOT_FOUND);
            .          .          .                      .                    .          .                    .            .          .           
1,364,870,000 ( 3.03%) 1 ( 0.05%) 1 ( 0.06%)   524,950,000 ( 3.07%)           2 ( 0.00%) 0          209,980,000 ( 4.34%)   1 ( 0.00%) 0               int bucket_index = hash_table->hashFunction(key, MAX_WORD_LENGTH) % hash_table->capacity;
  839,920,000 ( 1.87%) 1 ( 0.05%) 1 ( 0.06%)   419,960,000 ( 2.46%)  73,838,721 ( 6.14%) 0          104,990,000 ( 2.17%)   0          0               LinkedList* llist = hash_table->buckets[bucket_index];
  104,990,000 ( 0.23%) 0          0                      0                    0          0          104,990,000 ( 2.17%)   0          0               int index = 0;
            .          .          .                      .                    .          .                    .            .          .               // printf("bucket_index: %d\n", bucket_index);
3,267,971,940 ( 7.27%) 2 ( 0.11%) 2 ( 0.11%) 2,425,395,552 (14.20%) 100,380,823 ( 8.34%) 0          104,990,000 ( 2.17%)   0          0               for (int i = 0; i < llist->size; i++) {
5,060,691,104 (11.25%) 0          0          2,530,345,552 (14.81%) 183,782,826 (15.27%) 0          632,586,388 (13.08%)   0          0                   index = llist->next[index];
            .          .          .                      .                    .          .                    .            .          .                   // printf("llist->data[index].key: %s\n", llist->data[index].key);
            .          .          .                      .                    .          .                    .            .          .                   // printf("key: %s\n", key);
8,223,623,044 (18.28%) 0          0          3,162,931,940 (18.51%) 216,223,895 (17.97%) 0          632,586,388 (13.08%)   0          0                   if (strcmp(llist->data[index].key, key) == 0) {
            .          .          .                      .                    .          .                    .            .          .                       // printf("FOUND\n");
  209,960,000 ( 0.47%) 0          0                      0                    0          0                    0            0          0                       return FOUND;
            .          .          .                      .                    .          .                    .            .          .                   }
            .          .          .                      .                    .          .                    .            .          .               }
            .          .          .                      .                    .          .                    .            .          .           
       10,000 ( 0.00%) 0          0                      0                    0          0                    0            0          0               return NOT_FOUND;
  209,980,000 ( 0.47%) 0          0            209,980,000 ( 1.23%)           0          0                    0            0          0           }
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .           ChainHashTableErrors chainHashTableDelete(ChainHashTable* hash_table, const char* key) {
            .          .          .                      .                    .          .                    .            .          .               warning(hash_table, CHAIN_NULL_PTR_ERROR);
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               int bucket_index  = hash_table->hashFunction(key, MAX_WORD_LENGTH) % hash_table->capacity;
            .          .          .                      .                    .          .                    .            .          .               LinkedList* llist = hash_table->buckets[bucket_index];
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               int index = 0;
-- line 145 ----------------------------------------
-- line 151 ----------------------------------------
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .                       break;
            .          .          .                      .                    .          .                    .            .          .                   }
            .          .          .                      .                    .          .                    .            .          .               }
            .          .          .                      .                    .          .                    .            .          .           
            .          .          .                      .                    .          .                    .            .          .               return CHAIN_HASH_SUCCESS;
            .          .          .                      .                    .          .                    .            .          .           }
            .          .          .                      .                    .          .                    .            .          .           
            5 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)             0                    0          0                    2 ( 0.00%)   0          0           ChainHashTableErrors chainHashTableDtor(ChainHashTable* hash_table) {
        5,006 ( 0.00%) 1 ( 0.05%) 0                  4,003 ( 0.00%)           0          0                    1 ( 0.00%)   0          0               for (int bucket_index = 0; bucket_index < hash_table->capacity; bucket_index++) {
        9,000 ( 0.00%) 1 ( 0.05%) 1 ( 0.06%)         4,000 ( 0.00%)         125 ( 0.00%) 0                1,000 ( 0.00%)   0          0                   llistDtor(hash_table->buckets[bucket_index]);
       16,000 ( 0.00%) 0          0                  7,000 ( 0.00%)           0          0                2,000 ( 0.00%)   0          0                   FREE(hash_table->buckets[bucket_index]);
            .          .          .                      .                    .          .                    .            .          .               }
            .          .          .                      .                    .          .                    .            .          .           
            6 ( 0.00%) 0          0                      3 ( 0.00%)           0          0                    2 ( 0.00%)   0          0               FREE(hash_table->buckets);
            .          .          .                      .                    .          .                    .            .          .           
            1 ( 0.00%) 0          0                      0                    0          0                    0            0          0               return CHAIN_HASH_SUCCESS;
            2 ( 0.00%) 0          0                      2 ( 0.00%)           0          0                    0            0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S

--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                      D1mr                 DLmr       Dw                     D1mw            DLmw       
--------------------------------------------------------------------------------
29,048,264,193 (64.58%) 37 ( 2.02%) 35 ( 1.96%) 13,159,050,067 (77.02%) 626,736,858 (52.08%) 1 ( 0.02%) 4,835,379,299 (99.97%) 10,122 (21.80%) 0           events annotated

